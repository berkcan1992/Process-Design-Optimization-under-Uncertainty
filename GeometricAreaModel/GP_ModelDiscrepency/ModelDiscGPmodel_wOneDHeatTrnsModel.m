%% Compute bond length for each interface on a given layer

clc; clear; close all;
% ======================================================================= %
%__________________________       INPUTS     ______________________________
%Process Variables
%__________________________________________________________________________
%Filament dimensions

T_E = 110; %Temperature of the envelope (ºC)
% v = 0.032; %Velocity of the extrusion head (m/sec)
w = 0.8e-3; % layer width [meters]
h = 0.7e-3; % layer height [meters]
L = 0.035; %Length of the filament (meters)

% numLayers = 6;
% num_Filaments = n_int+1;
layer = 6; % which layer we are looking at for the bond lengths 
% numFilaments-1: (numFilaments-1)th interface on that given layer
num_Filaments = 15;

% Process parameters
% ProcessParam = [wth, hth, layer, num_Filaments];
%__________________________________________________________________________
% Material parameters for the bond length model
Surf_tens = 0.29; % Surface tension
b1_ = 0.00345; % Model parameter for temp. dependent surface tension
Visco = 5100; % viscosity
% Using 7 differentSamples, Calibrated for all layers with 0.05 std for obs. error, necking above temp. 150 Celcius
% b2_ = 0.0185; % for temp above 150 
b2_ = 0.0193; % for temp above 130 celcius

% b2_=0.0011;
% temp model alpha parameter, density * Specific Heat
roC = 1040*1290;
% roC = 1.8844e6;
roC = 9.6228*1e5;


b2_=0.0016;
% roC = 1e6;

Ref_temp = 130; %celcius
BondModelParam = [Surf_tens, b1_, Visco, b2_];

%__________________________________________________________________________


% numInt = numFilaments-1;


% Process parameters
% ProcessParam = [wth, hth, layer, num_Filaments];
ProcessParam = [T_E, w, h, L, num_Filaments,layer];


% [t210s28_1_temps.mat; t210s28_2_temps.mat; ;
% t234s34_4_temps.mat; t234s34_2_temps.mat
% t219s23_5_temps.mat; 
% t242s26_3_temps.mat; 
% t260s35_1_temps.mat; t260s35_3_temps.mat;
% t223s29_5_temps.mat; t223s29_6_temps.mat
% t247s37_2_temps.mat; t247s37_3_temps.mat;
% t255s46_2_temps.mat; t255s46_3_temps.mat;
% t252s21_3_temps.mat;
% t240s42_1_temps.mat; t240s42_2_temps.mat; t240s42_3_temps.mat;
% t239s29_1_temps.mat
% t239s40.4_1; t239s36.6_1; t239s32.8_1; t239s25.2_1]

bond_test = [.34036,.34544,.4318,.47752,.52578,.51562,.53594,.44196,.44196,.4191,.44958,.39878,.39624,.40386;...
    0.4299712,0.424307,0.4069334,0.404749,0.45423328,0.4965192,0.476885,0.4200144,0.3517646,0.3564382,0.308864,0.2895854,0.3100324,0.33782;...
    0.4435094,0.4850384,0.518033,0.4221226,0.4375404,0.4354576,0.4451858,0.4208272,0.350139,0.432562,0.3460496,0.2878074,0.3048,0.3305302;...
    0.3683,0.49276,0.54102,0.50292,0.47498,0.45212,0.3945128,0.35814,0.37592,0.37846,0.38354,0.33782,0.3048,0.3175;...
    0.3640836,0.4683506,0.4976114,0.4875276,0.4924806,0.479806,0.4400296,0.3030982,0.2621788,0.2975356,0.3502152,0.2939288,0.2994914,0.2988056;...
    0.36576,0.38339776,0.42164,0.4445,0.45974,0.43942,0.44196,0.34544,0.26162,0.3175,0.35306,0.3175,0.32512,0.31496;...
    
0.37608002,0.45202856,0.46849284,0.48750982,0.47684436,0.53493924,0.5350256,0.55785512,0.49221136,0.4525391,0.42904156,0.36982908,0.38149022,0.34241486;...
0.39234872,0.45067474,0.49032668,0.51163474,0.52864512,0.56627014,0.50580036,0.47223172,0.48743616,0.36446714,0.36421822,0.29066236,0.25915366,0.24448008;...
0.44217082,0.51237896,0.54218078,0.5249545,0.52384706,0.52930806,0.47368206,0.42020744,0.39194232,0.42972482,0.43052746,0.29521404,0.17839436,0.17513046;...
0.41310306,0.46531022,0.49755044,0.51779678,0.50056796,0.48941482,0.49024032,0.35955224,0.34945828,0.36379912,0.44054268,0.38415722,0.24096472,0.1950466;...
0.37077904,0.45975524,0.5076063,0.48265842,0.49868836,0.5224399,0.49926748,0.37275516,0.35809174,0.36031678,0.34369756,0.37786056,0.3447161,0.24307292;...
0.42032174,0.48829468,0.4779899,0.3707003,0.4393565,0.50765964,0.44572936,0.43946318,0.35772852,0.33334452,0.27874722,0.41469564,0.21207476,0.17149826;...

% 234
0.49972976,0.49918366,0.5942203,0.60069222,0.59070494,0.58726832,0.55822088,0.6103493,0.58261758,0.56938926,0.53907436,0.49749456,0.43745658,0.44698158;...
0.52517802,0.62820042,0.6191758,0.59592718,0.62732666,0.6025007,0.54346348,0.59428888,0.56614568,0.5799455,0.5107813,0.4629658,0.44630848,0.46021244;...
0.46298866,0.60053728,0.63901828,0.6136259,0.5877814,0.59059318,0.49984152,0.54671214,0.5094859,0.5264023,0.43993562,0.42730166,0.417957,0.4287393;...
.46056804,0.56884062,0.58648346,0.62321948,0.6111494,0.6027928,0.54422802,0.5205222,0.49200562,0.49997614,0.44355258,0.37338254,0.35887914,0.41262554;...
0.42996866,0.53984398,0.62629796,0.62618112,0.57526428,0.53710078,0.52361084,0.52254912,0.43553634,0.49069752,0.47009304,0.40334184,0.35515804,0.40309546;...
0.46550834,0.4894834,0.5535803,0.54369208,0.50246788,0.5346573,0.4884039,0.49898808,0.45423836,0.4741037,0.4466209,0.43531536,0.35483546,0.41630346;...


0.4152773,0.49155096,0.49717198,0.51966622,0.51419252,0.56369966,0.5109845,0.5931154,0.57510426,0.5612638,0.51049936,0.45569124,0.4103751,0.35611562;...
0.45037756,0.49301908,0.5153279,0.57264554,0.56862472,0.57863232,0.49929034,0.41167558,0.45964094,0.45371004,0.44888658,0.40229028,0.38023292,0.3370453;...
0.4773041,0.5073396,0.53200046,0.44604432,0.54495192,0.54479952,0.51606704,0.50926746,0.52959508,0.55216806,0.46471332,0.39617396,0.33512506,0.33582102;...
0.41636696,0.5406644,0.54855364,0.45114464,0.56742838,0.52975764,0.48082962,0.512191,0.4633595,0.49773586,0.46232572,0.42603166,0.31571692,0.28541472;...
0.45110654,0.47657258,0.47276512,0.48886872,0.57792112,0.55242968,0.42865802,0.4861687,0.50082196,0.4987036,0.51308,0.44595796,0.33214564,0.29188664;...
0.40373046,0.48357282,0.47801784,0.45451522,0.56738266,0.55907432,0.49345342,0.44572174,0.43664378,0.4965573,0.47737522,0.44619926,0.35562286,0.32297624;...


% 219
0.5233416,.5431409,0.55840884,0.56544718,0.58068972,0.62260734,0.60261246,0.60144406,0.5678043,0.60091574,0.55173372,0.54177438,0.49940718,0.55068216;...
0.55108094,0.60392818,0.61627004,0.57293764,0.60960762,0.62648592,0.5920613,0.6319393,0.5831586,0.59348116,0.58632598,0.52845208,0.48192182,0.51847242;...
0.4714621,0.60396882,0.59527186,0.57980326,0.61548264,0.59813952,0.59962796,0.58145172,0.55776114,0.5346573,0.50161698,0.53475128,0.50662332,0.55002684;...
0.457327,0.5545963,0.57232296,0.64092836,0.5923534,0.57948322,0.57315354,0.55140098,0.54995826,0.54556152,0.51027838,0.53184552,0.51762914,0.55068724;...
0.41763696,0.52721764,0.56672988,0.64313054,0.60313062,0.5789295,0.6043041,0.58590688,0.54749954,0.5352542,0.51612038,0.48853598,0.47028608,0.51281584;...
0.43103546,0.54661816,0.52560982,0.56529732,0.55938928,0.57138824,0.58677048,0.56096408,0.5367655,0.57016142,0.54236112,0.46459902,0.38739572,0.40189404;...


% 242
0.5287518,0.4968748,0.5150612,0.538861,0.589407,0.6117336,0.6296914,0.624459,0.6274816,0.5923788,0.6061964,0.5866638,0.5515102,0.5743702;...
0.5696204,0.6041898,0.6063488,0.625983,0.6829044,0.6409436,0.6078728,0.6342634,0.626872,0.6320536,0.6482334,0.6265164,0.5887974,0.6059424;...
0.5416804,0.5944108,0.5917946,0.639318,0.637667,0.658622,0.6274054,0.632714,0.6562344,0.6659372,0.6058408,0.644398,0.6095492,0.5813298;...
0.4873244,0.5570982,0.6359906,0.6411214,0.6935978,0.6525514,0.627507,0.6502654,0.6537706,0.6307328,0.6968744,0.64389,0.6436614,0.583692;...
0.4852416,0.606806,0.6248146,0.6436614,0.6655816,0.684149,0.6857238,0.677926,0.711073,0.6773418,0.6337808,0.620141,0.5934456,0.5736082;...
0.5160264,0.5656834,0.6080252,0.6472682,0.6768592,0.650875,0.5959094,0.6594602,0.6787642,0.6785356,0.6521704,0.6116066,0.573151,0.5358638;...


% 260
0.6142228,0.633476,0.59996324,0.60678314,0.60715144,0.63980314,0.5936361,0.63285116,0.6802755,0.65730628,0.65530476,0.61607446,0.63907162,0.60670694;...
0.5277866,0.61855604,0.62245748,0.59917838,0.6758559,0.66427858,0.62059058,0.4988052,0.5874385,0.62328552,0.6084697,0.6237732,0.62148974,0.58792872;...
0.52666646,0.62297818,0.54336188,0.60486036,0.6612509,0.61420502,0.62617858,0.61985398,0.61020706,0.63487808,0.58953654,0.6246495,0.62301628,0.5326888;...
0.47173896,0.6360668,0.60600844,0.60186316,0.593598,0.61164978,0.63873634,0.6212459,0.62817502,0.64138048,0.6580378,0.65708022,0.59886596,0.53273452;...
0.45095668,0.5270881,0.5405755,0.63368936,0.63870586,0.63371984,0.62752732,0.54779418,0.65295526,0.6223,0.66298572,0.67560952,0.58203592,0.55062882;...
0.43590718,0.50871374,0.53298344,0.59543696,0.53740812,0.52642008,0.55616856,0.56285384,0.572262,0.53415692,0.53847238,0.54762146,0.47713392,0.50653188;...

0.55128414,0.48650398,0.54048914,0.56089804,0.5399151,0.62635638,0.6765925,0.70924928,0.69617336,0.75468988,0.6731762,0.60402216,0.61663834,0.72023224;...
0.52596796,0.57379108,0.56622696,0.57928256,0.63651638,0.62882272,0.56119776,0.62789562,0.62835536,0.5790819,0.60114434,0.5368671,0.5475732,0.5188585;...
0.44283884,0.56929528,0.54906926,0.58209942,0.68918582,0.60204096,0.6223,0.5499989,0.59191906,0.6134608,0.61738764,0.50529998,0.65936876,0.44008548;...
0.42440606,0.60405772,0.53949854,0.578485,0.6052439,0.59277758,0.60433204,0.60858908,0.60664598,0.6283579,0.59077352,0.52494434,0.60546234,0.52882292;...
0.42846752,0.55383938,0.5604002,0.52768246,0.55845456,0.574802,0.60251086,0.5744845,0.61637418,0.618236,0.60318142,0.609854,0.53512212,0.56082946;...
0.45636688,0.53513482,0.5761101,0.61766196,0.58814716,0.56768492,0.5771642,0.57791096,0.5686552,0.57843674,0.56803036,0.6052947,0.60885324,0.53109114;...




0.45974,0.4699,0.47752,0.57404,0.54356,0.56896,0.57912,0.55372,0.57404,0.5334,0.53086,0.46736,0.4826,0.39878;...
0.4410456,0.516001,0.5659882,0.576326,0.5882386,0.551942,0.5441188,0.5353558,0.5128768,0.5272532,0.479044,0.4452366,0.4501388,0.4666488;...
0.4232402,0.4971288,0.4984242,0.5219192,0.540893,0.530987,0.5075936,0.5097018,0.4729988,0.4896358,0.4433316,0.4169156,0.386969,0.410464;...
0.37338,0.46736,0.5588,0.5461,0.51562,0.55372,0.49022,0.46736,0.44704,0.46228,0.4064,0.4318,0.36576,0.34036;...
0.4320032,0.501015,0.4959096,0.5491734,0.5740654,0.5442712,0.4872228,0.5086858,0.4503166,0.4656836,0.4737862,0.4746752,0.318643,0.3021838;...
0.39624,0.46736,0.47498,0.50292,0.5207,0.52324,0.51816,0.49022,0.48006,0.52324,0.54356,0.51054,0.40386,0.38354;...


0.44896786,0.5316982,0.51600862,0.57418478,0.59002422,0.60215272,0.56850026,0.57218326,0.5852541,0.57699402,0.54920388,0.51025044,0.4398899,0.4156329;...
0.45108368,0.52301648,0.537083,0.56547766,0.58947304,0.56915812,0.5715508,0.5461381,0.52749704,0.5259832,0.4974844,0.47360078,0.42066464,0.40232076;...
0.46949868,0.49494948,0.53362606,0.51970686,0.57227216,0.55766716,0.55334662,0.52743354,0.52559458,0.51816254,0.5051425,0.41399714,0.38491922,0.37633148;...
0.50288698,0.55566564,0.60553092,0.58313574,0.58095642,0.51802284,0.53081174,0.58198004,0.57529984,0.52344574,0.54884574,0.51365912,0.3689477,0.3999611;...
0.4185158,0.56053228,0.62021466,0.58981594,0.60616846,0.58852816,0.52083462,0.48990758,0.50382424,0.51381406,0.56691784,0.58566304,0.42553128,0.45587412;...
0.46973998,0.53179472,0.52980336,0.56693562,0.56510174,0.58839862,0.53193696,0.47608236,0.4984369,0.47954692,0.49264062,0.48007778,0.37756592,0.40466772;...



% 247
0.4783709,0.54935882,0.55651146,0.64164464,0.63561468,0.57915556,0.60948316,0.62603888,0.618998,0.53534564,0.66073274,0.63289942,0.61359034,0.55226458;...
0.4721606,0.5408676,0.5916422,0.6209538,0.6417564,0.5880862,0.5044694,0.554736,0.5155438,0.5381498,0.4979416,0.4823714,0.4460494,0.454533;...
0.4148836,0.519303,0.5697982,0.5690108,0.5335016,0.5665216,0.54102,0.5126228,0.5387086,0.5387594,0.5606034,0.4903216,0.4509516,0.3678682;...
0.49022,0.48768,0.49276,0.50292,0.4953,0.56134,0.51054,0.51054,0.5334,0.53086,0.51816,0.48514,0.40894,0.43942;...
0.4433824,0.5653786,0.5837936,0.632079,0.6243828,0.6126734,0.483235,0.4660392,0.450596,0.525272,0.5623306,0.5513324,0.3991356,0.4074414;...
0.40132,0.49022,0.5222621,0.56388,0.60706,0.52578,0.46736,0.50038,0.51308,0.53848,0.50292,0.49784,0.38608,0.34036;...

0.50022252,0.49384966,0.58049414,0.62350396,0.6790309,0.65327784,0.61936122,0.64331088,0.66291206,0.60349638,0.61517784,0.59365642,0.61863478,0.6113145;...
0.54656736,0.532003,0.57605168,0.59105038,0.60296044,0.60901326,0.56738012,0.6009767,0.58840624,0.58079132,0.58437526,0.57614058,0.48996346,0.51558444;...
0.50810922,0.56249824,0.57543954,0.62242192,0.53493924,0.59573668,0.58591196,0.58526934,0.60312808,0.55795164,0.50588418,0.52193952,0.48288702,0.5037328;...
0.5062474,0.62476888,0.61146182,0.62479936,0.63650622,0.59872118,0.53991256,0.58396886,0.5424043,0.5315204,0.48626268,0.48746918,0.4783074,0.48946816;...
0.39552118,0.6241669,0.6245987,0.65450974,0.63858902,0.62845442,0.55693056,0.58976514,0.56732678,0.56843168,0.53547264,0.47325534,0.39638478,0.4311777;...
0.42885106,0.53285644,0.55515764,0.57625996,0.58723276,0.54722268,0.50147474,0.56173624,0.52706778,0.5428488,0.4799203,0.48410622,0.43543982,0.45934376;...

% 255
0.45655738,0.46999652,0.51566572,0.518541,0.5208016,0.62770004,0.54172104,0.51536346,0.52565046,0.50227992,0.40564562,0.33947608,0.35683444,0.32060896;...
0.5926709,0.54748684,0.56901588,0.50802286,0.60945014,0.47397162,0.37812472,0.37754814,0.43219624,0.47982124,0.38938454,0.34812986,0.31689802,0.292481;...
0.47640494,0.55485792,0.5868035,0.59256168,0.55903114,0.43652694,0.35139122,0.29683964,0.3700272,0.43107356,0.3753612,0.33432496,0.3070606,0.31698946;...
0.46999652,0.55596536,0.56137048,0.54846728,0.60914534,0.46469808,0.35194748,0.34808414,0.35495738,0.37662358,0.38639496,0.36261548,0.33427416,0.3013329;...
0.4962398,0.53288946,0.57884568,0.6276721,0.56389778,0.47779178,0.36779454,0.3706368,0.4275074,0.43045634,0.34790634,0.37415216,0.35279076,0.3376168;...
0.38172644,0.51709066,0.5737479,0.53117242,0.54367684,0.51700938,0.33390586,0.39797228,0.51054254,0.43641772,0.38338252,0.36024566,0.38993572,0.33885886;...


0.42634662,0.44368974,0.47155608,0.53457856,0.53488082,0.52482496,0.4892548,0.53529992,0.51038252,0.48081438,0.45268896,0.45268896,0.40779954,0.4644136;...
0.4119372,0.5402453,0.55093108,0.58385456,0.55422292,0.35073082,0.29879544,0.38920674,0.41234106,0.45925486,0.40998394,0.38902386,0.38902894,0.4012311;...
0.44477686,0.55151274,0.52327556,0.61712094,0.57570116,0.3728593,0.21942044,0.362966,0.35028886,0.41468294,0.40058086,0.39137844,0.35539934,0.35438842;...
0.44995084,0.59001914,0.57839864,0.5419471,0.59413902,0.42091102,0.27862276,0.36215574,0.41688258,0.38352222,0.3281807,0.34272474,0.3269996,0.34674302;...
0.45231812,0.5679948,0.56512968,0.62465204,0.60005468,0.47823628,0.23387812,0.3785362,0.39737538,0.43279314,0.40831262,0.34986722,0.33042098,0.31650432;...
0.43450256,0.54148482,0.54622954,0.56114442,0.56582564,0.491998,0.31589218,0.40323008,0.4371594,0.4316476,0.36793424,0.40865298,0.3256534,0.324231;...

% 252
0.55738522,0.61043566,0.61152024,0.57534302,0.59857386,0.57761886,0.65809368,0.68104766,0.6301486,0.53376068,0.56312308,0.5386959,0.52199794,0.66555112;...
0.61183012,0.58129932,0.66402458,0.5863463,0.71343774,0.6843014,0.6476619,0.57585102,0.67907154,0.67721226,0.60123578,0.69242686,0.76477876,0.73348088;...
0.53121814,0.56947816,0.62403228,0.6691122,0.6726301,0.66238374,0.66779902,0.70857872,0.61658246,0.56339994,0.6538595,0.7207758,0.69273928,0.55965852;...
0.50919888,0.565531,0.7898384,0.6590792,0.8188579,0.73296526,0.65107566,0.66190368,0.72536812,0.7341108,0.71190612,0.68651374,0.60830206,0.5850763;...
0.58844942,0.50721768,0.6380099,0.54840632,0.68866258,0.74488802,0.76293472,0.68281296,0.77771498,0.80212438,0.5806821,0.66308986,0.66989198,0.60441078;...
0.52262532,0.6092825,0.75055984,0.77821536,0.75009248,0.69242178,0.58811414,0.6961251,0.65913254,0.62085982,0.6961251,0.56816244,0.47276512,0.45423328;...
% old data till here

% 240
0.41466262,0.4558792,0.50507392,0.50504344,0.51300126,0.4339717,0.44255944,0.39157402,0.38063424,0.39305738,0.38404038,0.37982398,0.33238948,0.31628588;...
0.45297344,0.5056505,0.53985922,0.53571648,0.53454554,0.50506122,0.33509204,0.32931354,0.37099494,0.38330632,0.40413178,0.3854831,0.2870835,0.26061416;...
0.42030904,0.48281082,0.54699662,0.55175658,0.504698,0.48899572,0.37711126,0.22698456,0.2406523,0.32714438,0.3284601,0.33616646,0.2758186,0.25061672;...
0.46190408,0.4895596,0.54720236,0.59442096,0.59171586,0.51962304,0.34720276,0.20550378,0.226695,0.26088594,0.3069463,0.33165542,0.27803094,0.2781173;...
0.426847,0.47982378,0.50027586,0.61251846,0.5746496,0.56677052,0.40109902,0.26175208,0.18744438,0.3071368,0.27439874,0.29134562,0.2334895,0.26212292;...
0.4185412,0.4694047,0.48911002,0.5334762,0.49486566,0.4750435,0.34272982,0.26179272,0.23569676,0.28867354,0.27715718,0.26702258,0.27318462,0.28847796;...

0.35929824,0.47534576,0.47138336,0.46134782,0.48847248,0.47264574,0.4444619,0.39653464,0.4187952,0.42407586,0.38542214,0.36285678,0.3166491,0.3002407;...
0.4395216,0.4659249,0.48832008,0.51588416,0.46546008,0.45659802,0.2869819,0.1663827,0.24778462,0.3145028,0.33756346,0.33693862,0.2664206,0.2670429;...
0.42903648,0.47355506,0.46439582,0.52242212,0.51666394,0.48405034,0.33488122,0.18446242,0.24486362,0.2818384,0.29347668,0.3705987,0.27872182,0.2941828;...
0.44256198,0.47477934,0.54450996,0.57017158,0.52038758,0.50667666,0.32310832,0.27626564,0.2240153,0.2417953,0.26565352,0.27254708,0.24091392,0.24750776;...
0.4759325,0.50446178,0.51124612,0.52245514,0.51375564,0.50380138,0.33187386,0.22312122,0.25773634,0.1895856,0.24119078,0.25834848,0.22841966,0.22899116;...
0.36141406,0.45170598,0.50584862,0.547116,0.50495454,0.47403512,0.333248,0.25595072,0.26163016,0.27344624,0.26644346,0.31148782,0.22169882,0.25414986;...

0.47588678,0.43875452,0.44865798,0.46764702,0.46363382,0.45648372,0.40408098,0.37208968,0.35530282,0.37025326,0.37471604,0.3458972,0.29574998,0.24188928;...
0.38843458,0.42154094,0.463677,0.49430686,0.5121402,0.47312326,0.31523432,0.20622006,0.23060152,0.24262842,0.22645878,0.29349446,0.21100542,0.2089277;...
0.38597078,0.46417484,0.47340774,0.5217541,0.47439326,0.48823372,0.36196016,0.25185116,0.24528526,0.27803094,0.22905974,0.2548255,0.18772886,0.2045843;...
0.39727632,0.46024292,0.47337726,0.48368204,0.47085504,0.44584874,0.31006288,0.21530056,0.1759585,0.225171,0.20108672,0.20832826,0.15592298,0.14678914;...
0.32492188,0.48575214,0.51270408,0.51988212,0.52134262,0.4646168,0.28194762,0.23549864,0.15044928,0.28493974,0.27695144,0.26534364,0.2622042,0.15588234;...
0.37644832,0.48580548,0.53607208,0.49981866,0.53055266,0.469773,0.31018734,0.2277872,0.21749766,0.23930864,0.24069294,0.26558748,0.2257171,0.15752572;...


% 239, 29
0.45230542,0.52118768,0.5403088,0.58503566,0.56751982,0.58525156,0.56224424,0.57604152,0.57003696,0.60970668,0.54079648,0.52919376,0.44619672,0.4762246;...
0.4901692,0.54553358,0.53066188,0.59530742,0.5659755,0.62522608,0.59914028,0.59497468,0.57490868,0.5890133,0.55431436,0.540766,0.47637446,0.51437794;...
0.45104812,0.56402478,0.5844667,0.59556396,0.62484,0.60548266,0.610362,0.6120638,0.57636664,0.5807075,0.58350912,0.56238648,0.48422814,0.51587654;...
0.4742815,0.54305708,0.55097172,0.6263132,0.61184282,0.60633102,0.61202824,0.63916052,0.59960256,0.60409836,0.56622188,0.54767988,0.47981616,0.5187061;...
0.48913542,0.55654956,0.56448706,0.61656214,0.61154818,0.59009026,0.5675757,0.62189106,0.63331852,0.61253624,0.60382912,0.56458612,0.51365404,0.52048918;...
0.4494022,0.54564026,0.5672963,0.59260232,0.59478418,0.62495938,0.5713857,0.56381396,0.57803034,0.57640982,0.5551297,0.53200046,0.49871884,0.50000662;...



% 239, 40.4
0.33244282,0.4414647,0.4622673,0.48722788,0.44974256,0.45773848,0.43367198,0.43710098,0.4105783,0.43114214,0.36920678,0.35406838,0.34081974,0.34934144;...
0.43154854,0.46525942,0.52502054,0.50560986,0.47872142,0.49654714,0.3063113,0.3465068,0.374777,0.38448488,0.34002218,0.3017647,0.30295596,0.30904688;...
0.38808152,0.49055528,0.51042824,0.49630584,0.51154076,0.5032629,0.2939923,0.32040576,0.37332412,0.3801237,0.347345,0.32964882,0.28075382,0.27628342;...
0.42144188,0.4837811,0.52474368,0.5519674,0.51640232,0.55964836,0.36920932,0.27937714,0.30582108,0.31122874,0.32210248,0.30475936,0.26363676,0.25082246;...
0.3912616,0.4824222,0.5459603,0.48391318,0.49600612,0.57746138,0.44486068,0.36122102,0.33447482,0.40161464,0.3526028,0.2875407,0.22924262,0.23139146;...
0.42460418,0.48467772,0.55710074,0.54722522,0.49233836,0.51828954,0.386334,0.38923468,0.3475736,0.39515034,0.4100449,0.32550608,0.21372322,0.20767802;...


% 239, 36.6
0.39657274,0.43955716,0.46701964,0.49577498,0.5179441,0.51653948,0.5210302,0.5100701,0.50819304,0.45959014,0.45302424,0.42136568,0.37173662,0.32860996;...
0.43852338,0.48106584,0.49574196,0.52550568,0.49847754,0.50738024,0.47718726,0.44892722,0.45373036,0.49844198,0.40861742,0.37223446,0.3426206,0.3342894;...
0.40373808,0.49599342,0.50882042,0.52517802,0.512572,0.4758309,0.45647864,0.42980102,0.41588944,0.44896532,0.41025318,0.37158168,0.28946602,0.28678124;...
0.4276725,0.49652682,0.55074312,0.60269374,0.56600344,0.56037734,0.41877234,0.41396158,0.40896286,0.45105574,0.42479722,0.36032948,0.29878528,0.29327094;...
0.463804,0.5324983,0.54002178,0.56228234,0.56402732,0.51466496,0.44166536,0.42051732,0.44478448,0.41540176,0.41030144,0.34801302,0.28503118,0.29091128;...
0.4630801,0.5289677,0.4969129,0.49738788,0.50753772,0.52681378,0.50152554,0.46491398,0.44701206,0.4487164,0.4124452,0.3483102,0.29842714,0.32485584;...

% 239, 32.8
0.53359812,0.56913272,0.53813456,0.59743086,0.5902833,0.58443114,0.64095376,0.55507382,0.54564534,0.53483764,0.4992624,0.45996098,0.41694862,0.41996614;...
0.45393356,0.5183759,0.54654958,0.5600954,0.57925462,0.5579999,0.5467985,0.54591204,0.53052726,0.51954684,0.50519838,0.44608242,0.35789616,0.41486582;...
0.41216072,0.53092604,0.55535576,0.57847484,0.53035962,0.52826666,0.53441092,0.51242214,0.49464468,0.51356006,0.51239674,0.45524166,0.36979352,0.3763137;...
0.47165768,0.5388864,0.56259476,0.59882024,0.60259976,0.58589672,0.52954428,0.4896866,0.5489067,0.54675532,0.5045583,0.46144688,0.39492174,0.43192954;...
0.4114673,0.5301996,0.5826252,0.60937394,0.59715908,0.59642248,0.51113182,0.53384958,0.5193538,0.50675286,0.53015134,0.49059338,0.42706798,0.47463964;...
0.41952672,0.50155094,0.54557422,0.609854,0.59287156,0.58900568,0.55954422,0.52663598,0.5108194,0.52286916,0.53204872,0.51207162,0.44475146,0.41548304;...

% 239, 25.2
0.64510412,0.69162422,0.61755782,0.62313312,0.63444628,0.64474344,0.62667642,0.6623177,0.65887854,0.65463166,0.59112912,0.56574182,0.535051,0.61672216;...
0.5991606,0.63287402,0.66574162,0.64718438,0.65584578,0.66995802,0.63848234,0.66477134,0.65929002,0.66261742,0.61745114,0.58141616,0.52516532,0.56737758;...
0.52998878,0.60315856,0.63212218,0.6535801,0.65023238,0.63251842,0.61472826,0.6640195,0.6608953,0.67972432,0.59482482,0.57241186,0.59248802,0.55705756;...
0.49695608,0.59478926,0.5746623,0.61019182,0.63186564,0.6476238,0.65040002,0.66775584,0.66114168,0.67184016,0.6387211,0.61877702,0.61959236,0.55955438;...
0.49666144,0.61715142,0.59894978,0.62047628,0.61386974,0.64160908,0.63548514,0.65293494,0.60820808,0.65193672,0.65378838,0.6027166,0.5924804,0.57157366;...
0.5336032,0.48227488,0.56009032,0.52752498,0.55806594,0.60771278,0.54294278,0.57790588,0.5730621,0.61958982,0.61716158,0.5719318,0.53754528,0.52366926];


NumTest = size(bond_test,1)/layer;

Sample_Temp_Speed = 1.0*[210 28; 210 28;...
                         234 34; 234 34;...
                         219 23;...
                         242 26;...
                         260 35; 260 35;...
                         223 29; 223 29;...
                         247 37; 247 37;...
                         255 46; 255 46; ...
                         252 21; 240 42; 240 42; 240 42;
                         239 29; 239 40.4; 239 36.6; 239 32.8; 239 25.2];
                     
tic
% The low fidelity 1-D analytical model
% NeckRadii: bond length between two filaments:
%        Output of the heat transfer model that does not consider axial
%        heat conduction & neck growth model, in mm.
% [BondLengths] = Neck_Growth_Model(ProcessParam, BondModelParam,NumTest);
[BondLengths] = Neck_Growth_Model(ProcessParam, roC, BondModelParam, NumTest,Sample_Temp_Speed,Ref_temp);
toc


% Model discrepency: delta =  y_d - y_m - eps_obs
delta = bond_test - BondLengths - normrnd(0,0.05);

% Build a Surrogate model (GP) for delta
% Inputs: [Nozzle temp, printer speed, layer #, filament #]
% in [Celcius, mm/s, ID, ID]
for iii=1:NumTest
    Inp((iii-1)*layer*(num_Filaments-1)+1:iii*layer*(num_Filaments-1),:) = [Sample_Temp_Speed(iii,1)*ones(layer*(num_Filaments-1),1) ...
        Sample_Temp_Speed(iii,2)*ones(layer*(num_Filaments-1),1) ...
        zeros(layer*(num_Filaments-1),2)];
end

% Prediction inputs are x&y coordinates of vertical bond (ly) locations
% x,y coordinate of layer 1 & interface 1 (vertical)
x = w*1e3; y = 0.5*h*1e3; % in mm
iki_y=y*2;

kk=0;
for iii=1:NumTest
    for jj=1:layer
        for ii=1:num_Filaments-1
            kk=kk+1;
            % use x & y coordinates of vertical bonds as predict variables
            Inp(kk,3:4) = [ii*x y+(jj-1)*iki_y];
        end
    end
end


% Output: delta, in [mm]
Out=reshape(delta',NumTest*layer*(num_Filaments-1),1);

allData = [Inp Out];
%%
% -------------------------------------------------------------------------
%                               GP Model
% -------------------------------------------------------------------------
nl = length(Inp);

% % randomly select 95% to be training set for GP model
% num_train = round(0.95*nl); 
% idx_ = randperm(nl);
% 
% % Use the first 95% to train the GP model
% idx_train = idx_(1:num_train);
% allData_Train = allData(idx_train, :);
% 
% % The rest will be used to test the GP model
% idx_test = idx_((num_train + 1):end);
% allData_Test = allData(idx_test, :);



% Select test set for GP model and keep it same
NumGapsIncrement = 14*4;
GapId = 7; % 7 and 8 are the middle gaps
Test_set = GapId:NumGapsIncrement:nl;
all_set = 1:nl;
rem_set = setdiff(all_set,Test_set);


% Use these to train the GP model
% randomly sample some percent of available training data
Ratio = 0.96;
Train_set = randsample(rem_set,round(Ratio*length(rem_set)));
allData_Train = allData(Train_set, :);
% Test data
allData_Test = allData(Test_set, :);


gprMdl = fitrgp(allData_Train(:,1:end-1),allData_Train(:,end),'KernelFunction','ardsquaredexponential',...
      'FitMethod','exact','PredictMethod','exact','Standardize',1);
  
  
% % Select training set for GP model
% num_train = round(0.8*nl); 
% idx_ = 1:nl;
% 
% % Use these to train the GP model
% idx_train = idx_(1:num_train);
% allData_Train = allData(idx_train, :);
% 
% % Last 100 points will be used to test the GP model
% N_test = 100;
% idx_test = idx_(end-N_test-1:end);
% allData_Test = allData(idx_test, :);




% save 'allData_Train.data' allData_Train -ascii
% tbl = readtable('allData_Train.data','Filetype','text',...
% 'ReadVariableNames',false);
% tbl.Properties.VariableNames = {'Temperature','Speed','x','y','ModelDiscrepency'};

% gprMdl = fitrgp(tbl,'ModelDiscrepency','KernelFunction','ardsquaredexponential',...
%       'FitMethod','exact','PredictMethod','exact','Standardize',1);
  
% % initialize the kernel parameters
% sigma0_Lb = std(allData_Train(:,end));
% sigmaTGA0_Lb = sigma0_Lb;
% d = size(allData_Train(:,1:end-1),2);
% sigmaM0_Lb = 1*ones(d,1);
% 
% % fitting using fitrgp
% gprMdl = fitrgp(allData_Train(:,1:end-1),allData_Train(:,end),'Basis','constant',...
%                    'FitMethod','exact','PredictMethod','exact',...
%                    'KernelFunction','ardsquaredexponential',...
%                    'KernelParameters',[sigmaM0_Lb;sigmaTGA0_Lb],...
%                    'Sigma',sigma0_Lb,'Standardize',1);

% % Model parameters
% % Trend Function
% Beta_Lb= gprMdl.Beta;
% % The kernel parameters.
% sigmaM_Lb = gprMdl.KernelInformation.KernelParameters(1:end-1,1);
% sigmaTGA_Lb = gprMdl.KernelInformation.KernelParameters(end);
% % Estimated noise standard deviation (sigma_n)
% sigma_Lb  = gprMdl.Sigma;


  
xtest=allData_Test(:,1:end-1);
ytest=allData_Test(:,end);

% test the GP model
[delta_pred, delta_pred_sd, delta_pred_int] = predict(gprMdl,xtest);

% Compute the regression error on the test data
L = loss(gprMdl, xtest, ytest)

d = size(xtest,2);


% mean_deltapred=mean(delta_pred)
% std_deltapred=std(delta_pred)


% -----------------------------
%   Plot GP model test result
% -----------------------------
figure()
% plot(1:length(delta_pred), ytest, 'or', 1:length(delta_pred), delta_pred, '*b');
% errorbar(1:length(delta_pred), delta_pred,delta_pred_sd,'-b')
% boundedline(1:length(delta_pred),delta_pred,1.96*delta_pred_sd, '-bo', 'alpha');hold on;
boundedline(1:length(delta_pred),delta_pred,delta_pred_sd, '-bo', 'alpha');hold on;
plot(1:length(delta_pred), ytest, '.m','MarkerSize', 20);
legend('Confidence interval','GP predictions', 'Data')
xlabel('Test points', 'FontName', 'Times New Roman', ...
       'FontSize',16,'Color','k', 'Interpreter', 'tex');
ylabel('\delta','FontName', 'Times New Roman', ...
       'FontSize',16,'Color','k', 'Interpreter', 'tex');

axis tight;
set(gcf, 'Position',  [200, 300, 900, 600])
set(gcf, 'PaperPosition', [0 0 7 5]); %Position plot at left hand corner with width 5 and height 5.
set(gcf, 'PaperSize', [7 5]); %Set the paper to have width 5 and height 5.



[delta_m, delta_all_sd] = predict(gprMdl,Inp);
% DeltaMean=reshape(delta_m,(num_Filaments-1),NumTest*layer);
% DeltaMean=DeltaMean';
% DeltaStd=reshape(delta_all_sd,(num_Filaments-1),NumTest*layer);
% DeltaStd=DeltaStd';


% % calculate covariance matrix k(xi,xj;theta)
% kfcn = gprMdl.Impl.Kernel.makeKernelAsFunctionOfXNXM(gprMdl.Impl.ThetaHat);
% K = kfcn(Inp(:,:),Inp(:,:));

% bond length model predictions
Y_m=reshape(BondLengths',NumTest*layer*(num_Filaments-1),1);
Y_D=reshape(bond_test',NumTest*layer*(num_Filaments-1),1);

% Y_D= N( Y_m + DeltaMean, K + eps_obs*I) -> You Ling paper 2014, Eq. (12)
Y_pred=normrnd(Y_m + delta_m, delta_all_sd);
% Y_pred = mvnrnd(Y_m + delta_m, sqrt(K));

% error = g_true-g_pred
Err = Y_D-Y_pred;
figure;
plot(Err,'.')
xlabel('Sample sets', 'FontName', 'Times New Roman', ...
       'FontSize',16,'Color','k', 'Interpreter', 'tex');
ylabel('Error','FontName', 'Times New Roman', ...
       'FontSize',16,'Color','k', 'Interpreter', 'tex');

axis tight;
mean_Err_mf = mean(Err) 
std_Err_mf = std(Err)

figure;histogram(Err)


% compare mean measurement for each layer with model prediction
% Take mean for each layer for model
DeltaMean=reshape(delta_m,(num_Filaments-1),NumTest*layer);
DeltaMean=DeltaMean';
% mean model form error for each layer (each row is one layer)
mean_DeltaMean=mean(DeltaMean,2);

% Avg. Variances and then sqrt to get std for each layer
DeltaStd=reshape(delta_all_sd,(num_Filaments-1),NumTest*layer);
DeltaStd=DeltaStd';
DeltaVar=DeltaStd.^2;
mean_DeltaVar=mean(DeltaVar,2);
mean_DeltaStd = sqrt(mean_DeltaVar);

% Take mean for each layer for model prediction (neck growth model)
mean_BondLengths=mean(BondLengths,2);

% Take mean for each layer for measurements
mean_bond_test=mean(bond_test,2);

% y_true or g_pred
mean_Y_pred=normrnd(mean_BondLengths + mean_DeltaMean, mean_DeltaStd);


% error = g_true-g_pred
layerbylayer_Err = mean_bond_test-mean_Y_pred;
figure;
plot(layerbylayer_Err,'.')

mean_layer_Err_mf = mean(layerbylayer_Err) 
std_layer_Err_mf = std(layerbylayer_Err)


figure;histogram(layerbylayer_Err)




% ======================================================================= %
function[AllBondLengths] = Neck_Growth_Model(ProcessParam,RoC, inputs, NumTest,Sample_Temp_Speed,Ref_Temp)
% function[AllBondLengths] = Neck_Growth_Model(ProcessParam,inputs,NumTest)


%Filament dimensions
w = ProcessParam(2); % Layer Thickness (meters)
h = ProcessParam(3); % Layer Height (meters)
L = ProcessParam(4); % Layer Length (meters)
numFilaments = ProcessParam(5); % considered interface number on that layer
layer = ProcessParam(6); % considered layer number
% numFilaments - 1 = interface number (ranging from 1-14 for 15 filaments)
% for that given layer

% convert Celcius to Kelvin
KK = 273.15; % 0 Celcius in K



% ======================================================================= %
%% Temperature Model
%% This will plot the temperatures at line B (x = 175 pixels)
Matrix = ones(layer,numFilaments);
x = L/2; % location of the cut in meters


HalfBondLengths=zeros(layer,numFilaments-1);
AllBondLengths=zeros(NumTest*layer,numFilaments-1);
NeckRadius=zeros(1,numFilaments-1);


for iii=1:NumTest
    % nozzle temperature and printer speed for each sample
    TV=Sample_Temp_Speed(iii,:);
    % the nozzle temperature is observed to be at least 10 degrees less
    T_N = TV(1)-10; 
    v_p = TV(2);
    [Temp_C, time] = FDM_TempModel(Matrix,x,T_N,v_p,ProcessParam,RoC);
    
    % convert Celcius to Kelvin
    Temp = Temp_C + KK;
    
    % Average two adjacent lines' temperatures to obtain interface temperatures
    % for each interface on that layer
    int_Temp = zeros(size(Temp,1),numFilaments-1);
    for jj=1:layer
        for ii=2:numFilaments
            kk=(jj-1)*(numFilaments-1)+ii;
            T_idx = find(Temp(:,kk+1)<T_N+KK, 1, 'first');
            % find the first index that temp value is lower thatn 145 celcius
            T_idx_ = find((Temp(:,kk+1)+Temp(:,kk))/2<Ref_Temp+KK, 1, 'first');
            int_Temp(1:T_idx_-T_idx+1,kk-1) = ...
                (Temp(T_idx:T_idx_,kk-1)+...
                Temp(T_idx:T_idx_,kk))/2;
            if jj~=1 && ii==2
                kk_int=(jj-1)*(numFilaments-1)+ii;
                kk=(jj-1)*(numFilaments-1)+ii+jj-2;
                T_idx = find(Temp(:,kk)<T_N+KK, 1, 'first');
                % find the first index that temp value is lower thatn 145 celcius
                T_idx_ = find((Temp(:,kk)+Temp(:,kk-1))/2<Ref_Temp+KK, 1, 'first');
                int_Temp(1:T_idx_-T_idx+1,kk_int-1) = ...
                    (Temp(T_idx:T_idx_,kk-1)+...
                    Temp(T_idx:T_idx_,kk))/2;
            elseif jj~=1 && ii==numFilaments
                kk_int=(jj-1)*(numFilaments-1)+ii;
                kk=(jj-1)*(numFilaments-1)+ii+jj-1;
                T_idx = find(Temp(:,kk)<T_N+KK, 1, 'first');
                % find the first index that temp value is lower thatn 145 celcius
                T_idx_ = find((Temp(:,kk)+Temp(:,kk-1))/2<145+KK, 1, 'first');
                int_Temp(1:T_idx_-T_idx+1,kk_int-1) = ...
                    (Temp(T_idx:T_idx_,kk-1)+...
                    Temp(T_idx:T_idx_,kk))/2;
            end
        end
    end
    
    int_Temp_model = int_Temp'; % interface temperature

    tfinal=time(end);
    num=size(int_Temp_model,1)-T_idx(1)+1;
    dt=tfinal/num;

        
    for jj=1:layer
        
        for rr=1:numFilaments-1 % loop over each interface for layer 1

            % interface temperature for experiment
            T = int_Temp_model((jj-1)*(numFilaments-1)+rr,:);

            % Neck growth calculation using the experiment temperature
            % ==================================================================== %
            % automatic step size Runge-Kutta-Fehlberg integration method
            % (Burden and Faires, 1985)
            % To overcome numerical instabilities when theta = 0, the initial BC.
            % is fixed at a time value slightly different than zero and the
            % corresponding value of theta is determined from Eq. 15

            % They found that the majority of neck growth and sintering in the ABS
            % fibers occurred when the interphase temperature was above 200°C,
            % which meant (based on heat transfer analysis and confirmed by
            % experiments) that the nozzle temperature had a large effect on
            % sintering while environment temperature had little effect.

            % In which delta is time step. For this case, delta is set equal to 2*dt.
            % dt is the time step that is used for the interval loop
            % ==================================================================== %

            % ao = w/2; % initial radius: half of layer width in meters
        %     ao = sqrt(w/2*h/2) % initial radius: half of layer width in meters
            aa=w/2; bb=h/2;
            % initial radius of an ellipse at 45 degrees
            ao=aa*bb/sqrt(aa^2*sin(0.25*pi)^2+bb^2*cos(0.25*pi)^2); % in [m]
            % Material properties - ABS
            %Surface tension
            gamma = inputs(1);
            % gamma=.029; % N/m for ABS P400 at 240 celcius
            % gamma=.047; % N/m for ABS P400 at 220 celcius
            % gamma=.054; % N/m for ABS P400 at 200 celcius
            % with a temp. dependent of Delta Gamma/ Delta T = - 0.000345 N/m/K
            b1=inputs(2);
            % b1 = 0.00345;
            Delta_Gamma = -b1*ones(1,ceil(tfinal/dt)+1);

            % Temperature dependent viscosity
            % eta_r=5100; % %Viscosity at temp 240 celc
            eta_r = inputs(3);
            % b2 = 0.056; % model parameter for temp dependent viscosity
            b2 = inputs(4); % model parameter for temp dependent viscosity

            Kel = 273.15; % Kelvin conversion
            [~,idx]=min(abs(T-(240+Kel)));
            if T(1)>240+Kel
                Delta_Gamma(1:idx) = -0.0005;
                % Delta_Gamma(1:idx) = -0.000000001;
            end

            T_r_C = 240; % reference temperature in C
            T_r = T_r_C+Kel; % in K

            Eta(1) = eta_r*exp(-b2*(T(1)-T_r));
            Gamma(1) = gamma + Delta_Gamma(1) * (T(1)-T_r);

            Eta(2) = eta_r*exp(-b2*(T(2)-T_r));
            Gamma(2) = gamma + Delta_Gamma(2) * (T(2)-T_r);

            theta(1)=0;
            t_bond(1)=0;

            theta(2)=sqrt(2*(dt)*Gamma(2)/(Eta(2)*ao)); % Eq. 15
            t_bond(2)=2*dt;

            for jjj=4:2:(tfinal/dt-1)
                delta_t=2*dt;
                t_bond(jjj/2+1)=t_bond(jjj/2)+delta_t;
                %k1 calculation at t_bond(i/2)
                eta_1=eta_r*exp(-b2*(T(jjj-1)-T_r));
                gamma_1 = gamma+ Delta_Gamma(jjj-1) * (T(jjj-1)-T_r);
                theta_1=theta(jjj/2);
                k1=(gamma_1/(3*ao*eta_1*sqrt(pi)))*((pi-theta_1)*cos(theta_1)+...
                    sin(theta_1))*((pi-theta_1+sin(theta_1)*(cos(theta_1)))^(1/2))/...
                    (((pi-theta_1)^2)*((sin(theta_1))^2));

                %k2 calculation
                eta_2=eta_r*exp(-b2*(T(jjj)-T_r));
                gamma_2 = gamma+ Delta_Gamma(jjj) * (T(jjj)-T_r);
                theta_2=theta(jjj/2)+dt*k1;
                k2=(gamma_2/(3*ao*eta_2*sqrt(pi)))*((pi-theta_2)*cos(theta_2)+...
                    sin(theta_2))*((pi-theta_2+sin(theta_2)*(cos(theta_2)))^(1/2))/...
                    (((pi-theta_2)^2)*((sin(theta_2))^2));
                %k3 calculation
                eta_3=eta_2;
                gamma_3=gamma_2;
                theta_3=theta(jjj/2)+dt*k2;
                k3=(gamma_3/(3*ao*eta_3*sqrt(pi)))*((pi-theta_3)*cos(theta_3)+...
                    sin(theta_3))*((pi-theta_3+sin(theta_3)*(cos(theta_3)))^(1/2))/...
                    (((pi-theta_3)^2)*((sin(theta_3))^2));
                %k4 calculation
                eta_4=eta_r*exp(-b2*(T(jjj+1)-T_r));
                gamma_4 = gamma+ Delta_Gamma(jjj+1) * (T(jjj+1)-T_r);
                theta_4=theta(jjj/2)+2*dt*k3;
                k4=(gamma_4/(3*ao*eta_4*sqrt(pi)))*((pi-theta_4)*cos(theta_4)+...
                    sin(theta_4))*((pi-theta_4+sin(theta_4)*(cos(theta_4)))^(1/2))/...
                    (((pi-theta_4)^2)*((sin(theta_4))^2));

                % theta
                theta(jjj/2+1)=theta(jjj/2)+(1/6)*delta_t*(k1+2*k2+2*k3+k4);
            end
            % y = a*sin(theta)

            % bond length = initial radius*sin(angle)
            bondLength=ao*sin(theta);

            % find the time when temperature reaches 112 celcius
            index1=find(Ref_Temp+KK>T,1,'first');
            [~,index2]=min(abs(time(index1)-t_bond));
            
%             if rr==1
%                 % find the time index that corresponds to the same time
%                 [~,index2]=min(abs(time(index1)-t_bond));
%             else
%                 % find the time index that corresponds to the same time
%                 [~,index2]=min(abs(exp_time(index1+firstEl-1)-t_bond));
%             end
            

            NeckRadius(rr) = bondLength(index2)*1e3; % neck radius in mm
        end
    
        HalfBondLengths(jj,:) = NeckRadius;
    end
    AllBondLengths((iii-1)*layer+1:iii*layer,:) = 2*HalfBondLengths;
end

end


function[temp,abcissa] = FDM_TempModel(matrix,x,T_n,V_p,ProcessParam,MaterialParam)

%Process Variables
T_L = T_n; %Extrusion temperature (ºC)
T_E = ProcessParam(1); %Temperature of the envelope (ºC)
v = V_p; % printer speed/Velocity of the extrusion head (m/sec)
%Filament dimensions
Wid = ProcessParam(2); % Layer Thickness (meters)
Ht = ProcessParam(3); % Layer Height (meters)
L = ProcessParam(4); % Length of the filament (meters)

roC = MaterialParam; % Density (kg/m^3)
% h_conv = MaterialParam(2); % Heat transfer coefficient (loss of heat by natural convection)
% lam = MaterialParam(3); % filament and adjacent filament & support
% N_Samples = size(ro,1);

                
%____________________________________ STEP 1 ____________________________________
%Definition of the vector that contains the number of total filaments in each layer
matrix_lin = size(matrix,1);
matrix_col = size(matrix,2);
vector = zeros(matrix_lin,2);
ctr = 0; % # of layers
for i = matrix_lin:-1:1
    ctr = ctr + 1;
    for j = 1:matrix_col
        if matrix(i,j) ~= 0
            vector(ctr,1) = vector(ctr,1) + 1;
        end
    end
end

%Number of layers
m = length(vector(:,1));
%Number of filaments
n = 0;
for j = 1:m
    if m == 1
        n = vector(1,1);
    else
        if vector(j,2) <= 1
            n = n + vector(j,1);
        end
    end
end
%____________________________________ STEP 2 ____________________________________
%Computation variables
dt = .1; %Step time
temp_extra = 10; %Additional time computation after construction of the part
erro = 1e-3; %Convergence error
% FinalTimeFirstFila = .1; % delay time between filamentss
%____________________________________ STEP 3 ____________________________________
%Definition of the size of the variables
% ii = 5; # of contacts with adjacent filaments and support
h = zeros(1,5); lambda = zeros(1,5); a = zeros(n,5); T = zeros (n,5);
vec_b = zeros(n,5); vec_Q = zeros(n,5); b = zeros(1,n); Q = zeros(1,n);
T_begin = zeros(1,n); dif = zeros(1,n); Biot = zeros(1,n); save_T = zeros(1,n);
old_T = zeros(1,n); save_lim = zeros(1,n); viz = zeros(11,n);
%____________________________________ STEP 4 ____________________________________
%Process Variables
for lin = 1:n %Temperature of support (ºC)
    T(lin,5) = T_E;
end

% % For Cylinder
% area = pi * (Wid/2)^2; %Area of the cross section of filament (meters^2) -
% per = pi * Wid; %Perimeter of the cross section of filament (meters)

% For Ellipse
aa=Wid/2; bb=Ht/2;
hh = (aa-bb)^2/(aa+bb)^2;
area = pi * (aa*bb); %Ellipse:Area of the cross section of filament (meters^2)
per = pi * (aa+bb)*(1+3*hh/(10+sqrt(4-3*hh))); %Perimeter of the cross section of filament (meters)

vol = area*L; %Volume of the filament
A_p = per*L; %Superficial area of the filament

% Material Properties
%Thermal conductivity (W/m.K)
% conductivity(1) = 0.1768; % material A
% conductivity(1) = 0.15; % material A
% conductivity(2) = 0.5; % material B
conductivity = 0.15; % material A
% %Density (kg/m^3)
% ro(1) = 1050; % material A
% ro(1) = 1040; % material A
% ro(2) = 1500; % material B
% %Specific heat (J/kg.K)
% C(1) = 2019.7; % material A
% C(1) = 1290; % material A
% C(2) = 2500.7; % material B
%____________________________________ STEP 5 ____________________________________
% Heat transfer coefficient (loss of heat by natural convection)
h_conv = 86;
%Thermal contact conductances between
h(1,1) = 86; % filament and left adjacent filament
h(1,2) = 86; % filament and down adjacent filament
h(1,3) = 86; % filament and right adjacent filament
h(1,4) = 86; % filament and top adjacent filament
h(1,5) = 86; % filament and support
% h(1,5) = h_cond;
%Fraction of perimeter contact between
lambda(1,1) = 0.1; % filament and left adjacent filament
lambda(1,2) = 0.1; % filament and down adjacent filament
lambda(1,3) = 0.2; % filament and right adjacent filament
lambda(1,4) = 0.1; % filament and top adjacent filament
lambda(1,5) = 0.1; % filament and support
% lambda(1,1:5)=lam;
%____________________________________ STEP 6 ____________________________________
%Definition of the parameters influenced by the contacts
for col = 1:5
    for lin = 1:n
        vec_b(lin,col) = h(1,col)*lambda(1,col);
        vec_Q(lin,col) = vec_b(lin,col)*T(lin,col);
    end
end
% %____________________________________ STEP 7 ____________________________________
% %Definition of the parameters influenced by the material properties

scalar = -per/(roC*area);
kt = conductivity;

limite=zeros(n+2,2); % BK

for kk = 1:1:(n+2)
    if mod(kk,2) == 1
        limite(kk,1) = (kk*L-x)/v;
        limite(kk,2) = (kk*L+x)/v;
    else
        limite(kk,1) = limite(kk-1,2);
        limite(kk,2) = ((kk+1)*L-x)/v;
    end
end

% temp=zeros(); % BK
for road = 1:n
    line = 0;
    for i = 0:dt:limite(n,2)
        line = line + 1;
        temp(line,road) = T_L;
    end
end

% abcissa=zeros((limite(end,2)+temp_extra)/dt,1); % BK
for layer = 1:m
    if layer == 1
        for num = 1:vector(layer,1)
            if num == 1
                %____________________________________ STEP 9 ____________________________________
                a(num,5) = 1; %Activation of the contact with support
                %____________________________________ STEP 10 ____________________________________
                %Definition of the variables b and Q defined in equation Eq. 7
                b(num) = h_conv*(1-lambda*a(num,:)') + vec_b(num,:)*a(num,:)';
                Q(num) = (h_conv*(1-lambda*a(num,:)')*T_E + ...
                    vec_Q(num,:)*a(num,:)')/b(num);
                
                %____________________________________ STEP 11 ____________________________________
                p = 0;
                for t = 0:dt:limite(num,1)
                    p = p+1; abcissa(p) = t;
                end
                %____________________________________ STEP 12 ____________________________________
                %Computation of the temperatures of the first filament
                %                 for t = (limite(num,1)+dt):dt:limite_final
                %                 for t = (limite(num,1)+dt):dt:FinalTimeFirstFila % BK
                for t = (limite(num,1)+dt):dt:limite(1,2) % BK
                    p = p+1; abcissa(p) = t;
                    temp(p,num)=(T_L-Q(num))*exp(scalar(num)*b(num)* ...
                        (t-limite(num,1))) + Q(num);
                end
                %Saving the last temperature of the period time of cooling down
                T_begin(num) = temp(p,num);
                %____________________________________ STEP 13 ____________________________________
                %Verification of the value of Biot Number
                Biot(num) = (vol/A_p)*(b(num)/kt(num));
                if Biot(num)>=0.1
                    'WARNING! We cannot use a Lumped System';
                end
                
                %____________________________________ STEP 14 ____________________________________
            else
                %Activation of the contacts
                a(num-1,3) = 1; a(num,1) = 1; a(num,5) = 1;
                %____________________________________ STEP 15 ____________________________________
                %Up-dating of the variable b
                for j = 1:num
                    b(j) = h_conv*(1-lambda*a(j,:)') + vec_b(j,:)*a(j,:)';
                end
                
                %____________________________________ STEP 16 ____________________________________
                if m == 1
                    if num == vector(layer,1)
                        limite_final = limite(num,2) + temp_extra;
                    else
                        limite_final = limite(num,2);
                    end
                else
                    limite_final = limite(num,2);
                end
                
                %                 for t = (FinalTimeFirstFila+dt):dt:limite_final % BK
                for t = (limite(num,1)+dt):dt:limite_final
                    p = p+1; abcissa(p) = t;
                    last = p-1;
                    for j = 1:num
                        save_T(j) = temp(last,j);
                    end
                    %____________________________________ STEP 17 ____________________________________
                    %Iterative process
                    for q = 1:100000
                        %Saving contacts and temperatures of adjacent filaments
                        for j = 1:num
                            if j == 1
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                            end
                            if j > 1 && j < num
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                            end
                            if j == num
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                            end
                            for k = 1:5
                                if T(j,k) ~= 0 && k ~= 5
                                    vec_Q(j,k) = vec_b(j,k)*T(j,k);
                                end
                            end
                            %Up-dating of the variable Q
                            Q(j) = (h_conv*(1-lambda*a(j,:)')*T_E + ...
                                vec_Q(j,:)*a(j,:)')/b(j);
                            old_T(j) = save_T(j);
                        end
                        %Computation of the temperatures
                        if num == 2
                            save_T(num-1) = (T_begin(num-1)-Q(num-1))* ...
                                exp(scalar*b(num-1)*(t-limite(num,1)))+Q(num-1);
                            save_T(num) = (T_L-Q(num))* ...
                                exp(scalar*b(num)*(t-limite(num,1)))+ Q(num);
                            save_lim(1,1) = limite(num,1);
                            save_lim(1,2) = limite(num,1);
                        else
                            for j=1:num-2
                                save_T(j) = (T_begin(j)-Q(j))*exp(scalar*b(j)* ...
                                    (t-limite(j,1)))+Q(j);
                            end
                            save_T(num-1) = (T_begin(num-1)-Q(num-1))* ...
                                exp(scalar*b(num-1)*(t-limite(num,1)))+Q(num-1);
                            save_T(num) = (T_L-Q(num))* ...
                                exp(scalar*b(num)*(t-limite(num,1)))+ Q(num);
                            save_lim(1,num-1) = limite(num,1);
                            save_lim(1,num) = limite(num,1);
                        end
                        for j = 1:num
                            dif(j) = abs(save_T(j)-old_T(j));
                        end
                        try_ = 1;
                        stop = 0;
                        for j = 1:num
                            if dif(try_) < erro
                                try_ = try_+1;
                            end
                            if try_ == num+1
                                stop = 1;
                            end
                        end
                        if stop == 1
                            for j = 1:num
                                temp(p,j) = save_T(j);
                            end
                            break;
                        end
                    end
                end
                T_begin(num) = temp(p,num);
                %End of iterative process
                %____________________________________ STEP 18 ____________________________________
                %Verification of the Biot Number
                for j=1:num
                    Biot(j) = (vol/A_p)*(b(j)/kt);
                    if Biot(j)>=0.1
                        'WARNING! We can not use a Lumped System';
                        j;
                        Biot(j);
                    end
                end
            end
        end
        % =================================================================== %
        % For the remaining layers -> BK
    else
        jj=1;
        for num = sum(vector(1:layer-1,1))+1:sum(vector(1:layer-1,1))+vector(layer,1)
            
            % =================================================================== %
            if mod(layer,2)==0 % for even layers
                
                % =================================================================== %
                % if the filament is the first filament on that layer
                if num == sum(vector(1:layer-1,1))+1
                    %____________________________________ STEP 9 ____________________________________
                    a(num,2) = 1; %Activation of the contact down filament
                    a(num-1,4) = 1; %Activation of the contact top filament
                    
                    % rest of the filaments on that layer
                else % if the filament is not the first filament on that layer
                    jj=jj+1;
                    
                    %____________________________________ STEP 14 ____________________________________
                    %Activation of the contacts (horizontal)
                    a(num-1,1) = 1; a(num,3) = 1;
                    %Activation of the contacts (vertical)
                    a(num,2) = 1; a(num-(2*jj-1),4) = 1;
                end
                
                %____________________________________ STEP 15 ____________________________________
                %Up-dating of the variable b
                for j = 1:num
                    b(j) = h_conv*(1-lambda*a(j,:)') + vec_b(j,:)*a(j,:)';
                end
                
                %____________________________________ STEP 16 ____________________________________
                if m == layer
                    if num == sum(vector(:,1))
                        limite_final = limite(num,2) + temp_extra;
                    else
                        limite_final = limite(num,2);
                    end
                else
                    limite_final = limite(num,2);
                end
                
                % check is array element is empty or not
                chk = size(save_T,2);
                
                for t = (limite(num,1)+dt):dt:limite_final
                    p = p+1; abcissa(p) = t;
                    last = p-1;
                    for j = 1:num
                        save_T(j) = temp(last,j);
                    end
                    
                    %____________________________________ STEP 17 ____________________________________
                    %Iterative process
                    for q = 1:10000
                        %Saving contacts and temperatures of adjacent filaments
                        for j = 1:num
                            if j == 1
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                                if chk >= j+2*(sum(vector(1,1))-j)+1
                                    T(j,4) = save_T(j+2*(sum(vector(1,1))-j));
                                    viz(4,j) = j+2*(sum(vector(1,1))-j);
                                end
                            end
                            if j > 1 && j < sum(vector(1,1))
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                                if chk >= j+2*(sum(vector(1,1))-j)+1
                                    T(j,4) = save_T(j+2*(sum(vector(1,1))-j));
                                    viz(4,j) = j+2*(sum(vector(1,1))-j);
                                end
                            end
                            if j == sum(vector(1,1))
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                                if chk >= j+1
                                    T(j,4) = save_T(j+1);
                                    viz(4,j) = j+1;
                                end
                            end
                            
                            % loop over all even layers except first one
                            for kk=2:2:m
                                % even layers' first filament
                                if j == sum(vector(1:kk-1,1))+1
                                    T(j,1) = save_T(j+1);
                                    viz(1,j) = j+1;
                                    T(j,2) = save_T(j-1);
                                    viz(2,j) = j-1;
                                end
                                if j > sum(vector(1:kk-1,1))+1 && j < sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,3) = save_T(j-1);
                                    viz(3,j) = j-1;
                                    T(j,1) = save_T(j+1);
                                    viz(1,j) = j+1;
                                    if chk >= j-(2*(j-(sum(vector(1:kk-1,1))+1))+1)
                                        T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                        viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    end
                                end
                                if j == sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,3) = save_T(j-1);
                                    viz(3,j) = j-1;
                                    if chk >= j-(2*(j-(sum(vector(1:kk-1,1))+1))+1)
                                        T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                        viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    end
                                end
                            end
                            
                            % loop over all odd layers except first one
                            for kk=3:2:m
                                % odd layers' first filament
                                if j == sum(vector(1:kk-1,1))+1
                                    T(j,3) = save_T(j+1);
                                    viz(3,j) = j+1;
                                    T(j,2) = save_T(j-1);
                                    viz(2,j) = j-1;
                                    T(j,4) = save_T(j+(2*(j-(sum(vector(1:kk-1,1))+1))));
                                    viz(4,j) = j+(2*(j-(sum(vector(1:kk-1,1))+1)));
                                end
                                % odd layers' inner filaments
                                if j > sum(vector(1:kk-1,1))+1 && j < sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,1) = save_T(j-1);
                                    viz(1,j) = j-1;
                                    T(j,3) = save_T(j+1);
                                    viz(3,j) = j+1;
                                    T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                    viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    T(j,4) = save_T(j+(2*(j-(sum(vector(1:kk,1))+2))));
                                    viz(4,j) = j+(2*(j-(sum(vector(1:kk-1,1))+2)));
                                end
                                % odd layers' last filament
                                if j == sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,1) = save_T(j-1);
                                    viz(1,j) = j-1;
                                    T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                    viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    T(j,4) = save_T(j+1);
                                    viz(4,j) = j+1;
                                end
                            end
                            
                            for k = 1:5
                                if T(j,k) ~= 0 && k ~= 5
                                    vec_Q(j,k) = vec_b(j,k)*T(j,k);
                                end
                            end
                            %Up-dating of the variable Q
                            Q(j) = (h_conv*(1-lambda*a(j,:)')*T_E + ...
                                vec_Q(j,:)*a(j,:)')/b(j);
                            old_T(j) = save_T(j);
                        end
                        
                        %Computation of the temperatures
                        for j=1:num-2
                            save_T(j) = (T_begin(j)-Q(j))*exp(scalar*b(j)* ...
                                (t-limite(j,1)))+Q(j);
                        end
                        save_T(num-1) = (T_begin(num-1)-Q(num-1))*exp(scalar*b(num-1)* ...
                            (t-limite(num,1)))+Q(num-1);
                        save_T(num) = (T_L-Q(num))*exp(scalar*b(num)*(t-limite(num,1)))+Q(num);
                        save_lim(1,num-1) = limite(num,1);
                        save_lim(1,num) = limite(num,1);
                        
                        for j = 1:num
                            dif(j) = abs(save_T(j)-old_T(j));
                        end
                        try_ = 1;
                        stop = 0;
                        for j = 1:num
                            if dif(try_) < erro
                                try_ = try_+1;
                            end
                            if try_ == num+1
                                stop = 1;
                            end
                        end
                        if stop == 1
                            for j = 1:num
                                temp(p,j) = save_T(j);
                            end
                            break;
                        end
                    end
                end
                T_begin(num) = temp(p,num);
                %End of iterative process
                %____________________________________ STEP 18 ____________________________________
                %Verification of the Biot Number
                for j=1:num
                    Biot(j) = (vol/A_p)*(b(j)/kt);
                    if Biot(j)>=0.1
                        'WARNING! We can not use a Lumped System';
                        j;
                        Biot(j);
                    end
                end
                
                % =================================================================== %
            else % odd layers
                % =================================================================== %
                % if the filament is the first filament on that layer
                if num == sum(vector(1:layer-1,1))+1
                    %____________________________________ STEP 9 ____________________________________
                    a(num,2) = 1; %Activation of the contact down filament
                    a(num-1,4) = 1; %Activation of the contact top filament
                    
                    % rest of the filaments on that layer
                else % if the filament is not the first filament on that layer
                    jj=jj+1;
                    
                    %____________________________________ STEP 14 ____________________________________
                    %Activation of the contacts (horizontal)
                    a(num-1,3) = 1; a(num,1) = 1;
                    %Activation of the contacts (vertical)
                    a(num,2) = 1; a(num-(2*jj-1),4) = 1;
                end
                
                %____________________________________ STEP 15 ____________________________________
                %Up-dating of the variable b
                for j = 1:num
                    b(j) = h_conv*(1-lambda*a(j,:)') + vec_b(j,:)*a(j,:)';
                end
                
                %____________________________________ STEP 16 ____________________________________
                if m == layer
                    if num == sum(vector(:,1))
                        limite_final = limite(num,2) + temp_extra;
                    else
                        limite_final = limite(num,2);
                    end
                else
                    limite_final = limite(num,2);
                end
                
                % check is array element is empty or not
                chk = size(save_T,2);
                
                for t = (limite(num,1)+dt):dt:limite_final
                    p = p+1; abcissa(p) = t;
                    last = p-1;
                    for j = 1:num
                        save_T(j) = temp(last,j);
                    end
                    
                    %____________________________________ STEP 17 ____________________________________
                    %Iterative process
                    for q = 1:100000
                        %Saving contacts and temperatures of adjacent filaments
                        for j = 1:num
                            %Saving contacts and temperatures of adjacent filaments
                            if j == 1
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                                T(j,4) = save_T(j+2*(sum(vector(1,1))-j));
                                viz(4,j) = j+2*(sum(vector(1,1))-j);
                            end
                            if j > 1 && j < sum(vector(1,1))
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                                T(j,3) = save_T(j+1);
                                viz(3,j) = j+1;
                                T(j,4) = save_T(j+2*(sum(vector(1,1))-j));
                                viz(4,j) = j+2*(sum(vector(1,1))-j);
                            end
                            if j == sum(vector(1,1))
                                T(j,1) = save_T(j-1);
                                viz(1,j) = j-1;
                                T(j,4) = save_T(j+1);
                                viz(4,j) = j+1;
                            end
                            
                            % loop over all even layers except first one
                            for kk=2:2:m
                                % even layers' first filament
                                if j == sum(vector(1:kk-1,1))+1
                                    T(j,1) = save_T(j+1);
                                    viz(1,j) = j+1;
                                    T(j,2) = save_T(j-1);
                                    viz(2,j) = j-1;
                                    T(j,4) = save_T(j+(2*((sum(vector(1:kk-1,1))-j))));
                                    viz(4,j) = j+(2*((sum(vector(1:kk-1,1))-j)));
                                end
                                if j > sum(vector(1:kk-1,1))+1 && j < sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,1) = save_T(j+1);
                                    viz(1,j) = j+1;
                                    T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                    viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    T(j,3) = save_T(j-1);
                                    viz(3,j) = j-1;
                                    %                                     j+(2*((sum(vector(1:kk,1))-j))+1)
                                    T(j,4) = save_T(j+(2*((sum(vector(1:kk-1,1))-j)))+1);
                                    viz(4,j) = j+(2*((sum(vector(1:kk-1,1))-j)));
                                end
                                if j == sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,3) = save_T(j-1);
                                    viz(3,j) = j-1;
                                    T(j,4) = save_T(j+1);
                                    viz(4,j) = j+1;
                                    T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                    viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                end
                            end
                            
                            % loop over all odd layers except first one
                            for kk=3:2:m
                                % odd layers' first filament
                                if j == sum(vector(1:kk-1,1))+1
                                    T(j,3) = save_T(j+1);
                                    viz(3,j) = j+1;
                                    T(j,2) = save_T(j-1);
                                    viz(2,j) = j-1;
                                end
                                % odd layers' inner filaments
                                if j > sum(vector(1:kk-1,1))+1 && j < sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,1) = save_T(j-1);
                                    viz(1,j) = j-1;
                                    T(j,3) = save_T(j+1);
                                    viz(3,j) = j+1;
                                    if chk >= j-(2*(j-(sum(vector(1:kk-1,1))+1))+1)
                                        T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                        viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    end
                                end
                                % odd layers' last filament
                                if j == sum(vector(1:kk-1,1))+vector(kk,1)
                                    T(j,1) = save_T(j-1);
                                    viz(1,j) = j-1;
                                    if chk >= j-(2*(j-(sum(vector(1:kk-1,1))+1))+1)
                                        T(j,2) = save_T(j-(2*(j-(sum(vector(1:kk-1,1))+1))+1));
                                        viz(2,j) = j-(2*(j-(sum(vector(1:kk-1,1))+1))+1);
                                    end
                                end
                            end
                            
                            for k = 1:5
                                if T(j,k) ~= 0 && k ~= 5
                                    vec_Q(j,k) = vec_b(j,k)*T(j,k);
                                end
                            end
                            %Up-dating of the variable Q
                            Q(j) = (h_conv*(1-lambda*a(j,:)')*T_E + ...
                                vec_Q(j,:)*a(j,:)')/b(j);
                            old_T(j) = save_T(j);
                        end
                        %Computation of the temperatures
                        for j=1:num-2
                            save_T(j) = (T_begin(j)-Q(j))*exp(scalar*b(j)* ...
                                (t-limite(j,1)))+Q(j);
                        end
                        save_T(num-1) = (T_begin(num-1)-Q(num-1))*exp(scalar*b(num-1)* ...
                            (t-limite(num,1)))+Q(num-1);
                        save_T(num) = (T_L-Q(num))*exp(scalar*b(num)*(t-limite(num,1)))+Q(num);
                        save_lim(1,num-1) = limite(num,1);
                        save_lim(1,num) = limite(num,1);
                        
                        for j = 1:num
                            dif(j) = abs(save_T(j)-old_T(j));
                        end
                        try_ = 1;
                        stop = 0;
                        for j = 1:num
                            if dif(try_) < erro
                                try_ = try_+1;
                            end
                            if try_ == num+1
                                stop = 1;
                            end
                        end
                        if stop == 1
                            for j = 1:num
                                temp(p,j) = save_T(j);
                            end
                            break;
                        end
                    end
                end
                
                T_begin(num) = temp(p,num);
                %End of iterative process
                %____________________________________ STEP 18 ____________________________________
                %Verification of the Biot Number
                for j=1:num
                    Biot(j) = (vol/A_p)*(b(j)/kt);
                    if Biot(j)>=0.1
                        'WARNING! We can not use a Lumped System';
                        j;
                        Biot(j);
                    end
                end
                
            end
        end
    end
end


end
    



    
    
    